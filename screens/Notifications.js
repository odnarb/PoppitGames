import React from 'react';

import {
  Switch,
  Text,
  TouchableOpacity,
  View
} from 'react-native';

import { notificationsStyleSheet as styles } from '../components/globalstyles';

import PushNotification from 'react-native-push-notification'

import { app } from '../components/globalconstants';

class NotificationsScreen extends React.Component {
  constructor(props){
    super(props);

    PushNotification.localNotificationSchedule({
      //... You can use all the options from localNotifications
      message: "My Scheduled Notification Message", // (required)
      date: new Date(Date.now() + 20 * 1000), // in 60 secs
        /* iOS and Android properties */
        title: "My Scheduled Notification Title", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
        playSound: true, // (optional) default: true
        soundName: 'poppit_sound',
        number: '10' // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    });

    PushNotification.configure({

        // (optional) Called when Token is generated (iOS and Android)
        onRegister: function(token) {
            console.log( 'FB Notifications TOKEN:', token );
        },

        // (required) Called when a remote or local notification is opened or received
        onNotification: function(notification) {
            console.log( 'FB Notifications:', notification );
        },

        // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
        senderID: "455311600291",

        // IOS ONLY (optional): default: all - Permissions to register.
        permissions: {
            alert: true,
            badge: true,
            sound: true
        },

        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,

        /**
          * (optional) default: true
          * - Specified if permissions (ios) and token (android and ios) will requested or not,
          * - if not, you must call PushNotificationsHandler.requestPermissions() later
          */
        requestPermissions: Platform.OS === 'ios'
    });
  }

  static navigationOptions = {
    title: 'Notifications',
  };

  state = {
    switchValue1:false,
    switchValue2:false,
    switchValue3:false
  };

  LocalNotification = () => {
    PushNotification.localNotification({
        /* Android Only Properties */
        id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        subText: "This is a subText", // (optional) default: none
        color: "red", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification

        /* iOS only properties */
        // alertAction: // (optional) default: view
        // category: // (optional) default: null
        // userInfo: // (optional) default: null (object containing additional notification data)

        /* iOS and Android properties */
        title: "My Notification Title", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
        message: "My Notification Message", // (required)
        playSound: true, // (optional) default: true
        // soundName: 'android.resource://com.poppitgames/raw/poppit_sound', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        soundName: 'poppit_sound',
        number: '10' // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    });
  }

  render() {
    return (
      <View style={styles.baseContainer}>

      <View>
        <TouchableOpacity style={styles.buttonBlue} onPress={() => this.LocalNotification()}>
          <View style={{ flexDirection: "row", alignItems: "center", justifyContent: "center" }}>
            <Text style={styles.btnBlue}>{'Local notification'.toUpperCase()}</Text>
          </View>
        </TouchableOpacity>
      </View>

        <View style={styles.topMargin}></View>
        <View style={styles.optionRow}>
          <View style={styles.optionSwitchContainer}>
            <Text style={[styles.grey,styles.optionHeader]}>App Features & Updates</Text>
            <Switch style={styles.switchWithMargin}
              onValueChange = {(value) => this.setState({switchValue1: value})}
              value = {this.state.switchValue1} />
          </View>
          <Text style={[styles.grey,styles.optionDescription]}>Get notified whenever new features are available.</Text>
        </View>

        <View style={styles.optionRow}>
          <View style={styles.optionSwitchContainer}>
            <Text style={[styles.grey,styles.optionHeader]}>Nearby Deals</Text>
            <Switch style={styles.switchWithMargin}
              onValueChange = {(value) => this.setState({switchValue2: value})}
              value = {this.state.switchValue2} />
          </View>
          <Text style={[styles.grey,styles.optionDescription]}>Get notified whenever you are near participating locations.</Text>
        </View>

        <View style={styles.optionRow}>
          <View style={styles.optionSwitchContainer}>
            <Text style={[styles.grey,styles.optionHeader]}>Recommended Deals</Text>
            <Switch style={styles.switchWithMargin}
              onValueChange = {(value) => this.setState({switchValue3: value})}
              value = {this.state.switchValue3} />
          </View>
          <Text style={[styles.grey,styles.optionDescription]}>Get notified whenever we have a new recommended deal for you.</Text>
        </View>


        <View style={styles.optionRow}>
          <View style={styles.optionContainer}>
            <Text style={[styles.grey,styles.optionHeader]}>Email Subscriptions</Text>
          </View>
          <Text style={[styles.grey,styles.optionSubHeader]}>Need help unsubcribing to email?</Text>
          <Text style={[styles.grey,styles.optionDescription]}>Every email sent by {app.name} has an unsubscribe link at the bottom of the email. You can also unsubscribe on our website. Find out how by visiting our <Text style={{ textDecorationLine: 'underline' }}>Help Center.</Text></Text>
        </View>
      </View>
    );
  }
}

export default NotificationsScreen
